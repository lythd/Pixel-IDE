import lang.core.math;
int i = 4;
int j = 3*2;
String msg = "hello";
print(msg);
int blank=?;
//sd sdfhous sfoushd 
Object nothing=null;
boolean yeehah =false;
int k = multiply(j,i);
print(3);
print(k);
j = 4*5-6;
print(j);
print(msg);
float testroot = root(64,3);
print(testroot);
testroot = root(64,2);
print(testroot);
testroot = root(64,6);
print(testroot);
testroot = root(2,2);
print(testroot);
testroot = root(0,2);
print(testroot);
testroot = root(2,0);
print(testroot);
testroot = root(9,2);
print(testroot);
testroot = root(1,2);
print(testroot);
testroot = root(0.5,2);
print(testroot);
testroot = root(3,2);
print(testroot);
testroot = 0/0;
print(testroot);

// TO DO
// skip and setskip instructions. setskip sets the variable %skip to the number provided, skip will skip the number of instructions provided, but only if %skip is 0.
// all operations should call to their types for the function. it would call for the first type's function. for int and float this would just end up acting as normal, but it allows other types to have their own implementations while still using the symbols.
// separate int and float instructions.
// go through all instructions and add try catches.
// casting, the instruction is there and working, but allow it to be used, maybe use a new symbol for it or something, like $= or something
// replace DIV_ZERO and ZERO_TO_ZERO with NaN and Indeterminate. Rather than having assigned values, they will be the value themselves, as like a string. In any operation it would just check for them, if either are found it would just immediately return them. 
// get variables to be highlighted on reassigning
// stop functions from getting highlighted in a comment, like, punctiation is fine tho 
// save prompt if not saved when testrunning or exporting 
// do some basic graphics stuff, so that multi pp can be made in pixel, and for game 
